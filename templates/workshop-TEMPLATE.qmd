---
title: "Integrating JavaScript Libraries into R for Dynamic Visualizations"
author: "An Bui"
date: May 23, 2023
execute:
  message: false
  warning: false
format:
  html:
    toc: true
    toc-location: left
    theme: sandstone
---

# 0. Setting up

```{r libraries-and-data}
library(tidyverse) # general use
library(plotly) # JS plots!
library(DT) # JS tables!
library(leaflet) # JS maps!
library(leaflet.extras) # leaflet add-ons!

# reading in the RDS (saved data object)
lobs <- readRDS(file = here::here("data", "lobsters.rds"))
```

# 1. Summarizing the data

```{r creating-lobs-summary}
# creating new data frame
lobs_summary <- lobs %>% 
  
  # calculate total lobster counts by protection status, site, & year (each point will represent lobster counts at a single site for each year from 2012-2018) ----
  group_by(protection_status, site, year) %>% 
  summarize(n = sum(total_count))
```

# 2. `plotly`

## a. create a static plot

```{r static-boxplot}
static <- lobs_summary %>% 
  
  # create boxplot of mpa vs non-mpa lobster counts ----
  ggplot(aes(x = protection_status, y = n)) +
  
  # geoms: a boxplot and points with jitter
  geom_boxplot(width = 0.5, outlier.shape = NA) +
  geom_point(aes(color = site, shape = site), size = 4, alpha = 0.8, 
             # turn the points into a jitter (with a little more control than geom_jitter)
             position = position_jitter(width = 0.25, height = 0, seed = 1)) +
  
  # update colors ----
  scale_color_manual(values = c("NAPL" = "#91B38A", 
                                "IVEE" = "#9565CC", 
                                "AQUE" = "#CCC065", 
                                "MOHK" = "#658ACC", 
                                "CARP" = "#CC6565")) +
  scale_shape_manual(values = c(15, 25, 17, 18, 19)) +
  
  # update labels ----
  labs(x = "Protection Status",
       y = "Lobster Counts",
       color = "Site", 
       shape = "Site") + 
  
  # theme ----
  theme_linedraw() +
  theme(axis.text = element_text(size = 10),
        axis.title = element_text(size = 13),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 11))

# print plot ----
static
```

## b. create an interactive plot

```{r basic-interactive-plot}
ggplotly(static)
```

## c. create a better interactive plot

### i. create a marker

```{r summary-marker-df}
lobs_summary_marker <- lobs_summary %>% 
  
  # create a new column called "marker" ----
  mutate(marker = paste0("Site: ", site, "<br>",
                         "Year: ", year, "<br>",
                         "Status: ", protection_status, "<br>",
                         "Lobster count: ", n))
```

### ii. make a new static plot with `text = marker` aesthetic argument

```{r new-static-plot, warning = TRUE}
# creating a new static plot
static_with_marker <- lobs_summary_marker %>% 
  
  # create boxplot of mpa vs non-mpa lobster counts ----
  ggplot(aes(x = protection_status, y = n, text = marker, group = protection_status)) +
  
  # geoms: boxplot and jitter
  geom_boxplot(width = 0.5, outlier.shape = NA) +
  geom_point(aes(color = site, shape = site), size = 4, alpha = 0.8, 
             position = position_jitter(width = 0.25, height = 0, seed = 1)) +
  
  # update colors ----
  scale_color_manual(values = c("#91B38A", "#9565CC", "#CCC065", "#658ACC", "#CC6565")) +
  scale_shape_manual(values = c(15, 25, 17, 18, 19)) +
  
  # update labels ----
  labs(x = "Protection Status",
       y = "Lobster Counts",
       color = "Site", 
       shape = "Site") + 
  
  # theme ----
  theme_linedraw() +
  theme(axis.text = element_text(size = 10),
        axis.title = element_text(size = 13),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 11))

# running the ggplot object will give you a scary warning - that's ok!
static_with_marker
```

### iii. create plot with markers

```{r better-interactive-plot}
lobs_interactive <- ggplotly(static_with_marker, tooltip = "text") %>% 
  
  # adjust the layout using layout()
  layout(
    # global font option
    font = list(family = "Times"),
    
    # adjust hover label (tooltip)
    hoverlabel = list(
      # edit the font: all goes into a list()
      font = list(
        family = "Times",
        size = 13,
        color = "#FFFFFF",
        align = "left"
      )
    )
  )

lobs_interactive
```

### iv. doing things in `plot_ly`

```{r doing-in-plotly}

```

# 3. `DT`

## a. create a basic interactive table

```{r basic-DT}
datatable(data = lobs)
```

## b. customizing your DT

```{r advanced-DT}
lobs_dt <- datatable(data = lobs,
                     
                     # make the column names informative ----
                     colnames = c("Year", "Date", "Site", "Protection status", "Transect", "Replicate", "Size (mm)", "Count", "Latitude", "Longitude"),
                     
                     # ADD COLUMN FILTERS
                     filter = "top",
                     
                     # put in extensions to datatable ----
                     extensions = c("Buttons", "ColReorder"),
                     
                     
                     # add in some options for our table
                     options = list(
                       # list 10 entries at once
                       pageLength = 10,
                       # automatically size columns
                       autoWidth = TRUE,
                       # highlight entries that match a search term
                       searchHighlight = TRUE,
                       
                       # adjust the document object
                       dom = "Bfrtip",
                       # buttons options
                       buttons = c("copy", "csv", "excel", "pdf", "print", "colvis"),
                       # set colReorder to show up in table
                       colReorder = TRUE
                     )
                     ) %>% 
  
  # style cells
  formatStyle("site",
              # set background color for the cell
              backgroundColor = styleEqual(
                levels = list("NAPL", "IVEE", "AQUE", "MOHK", "CARP"),
                values = c("NAPL" = "#91B38A",
                           "IVEE" = "#9565CC",
                           "AQUE" = "#CCC065",
                           "MOHK" = "#658ACC",
                           "CARP" = "#CC6565")
              )
              )

lobs_dt
```

# 4. `leaflet`

## a. some cleaning and filtering

```{r unique-sites}
# create df of unique sites ----
sites <- lobs %>% 
  select(site, protection_status, lat, lon) %>% 
  distinct()

# just mpa sites ----
mpa <- sites %>% 
  filter(protection_status == "MPA")

# just non-mpa sites ----
non_mpa <- sites %>% 
  filter(protection_status == "non-MPA")
```

## b. create a custom icon

```{r lobster-icon}

```

## c. create a map!

```{r leaflet-map}

```

# 4. saving the html objects

```{r saving-map, eval = FALSE}
htmltools::save_html(lobs_interactive, here::here("outputs", "plotly.html"))
htmltools::save_html(lobs_dt, here::here("outputs", "dt.html"))
htmltools::save_html(site_map, here::here("outputs", "leaflet.html"))
```
