---
title: "Integrating JavaScript Libraries into R for Dynamic Visualizations"
author: "An Bui"
date: May 16, 2023
execute:
  message: false
  warning: false
format:
  html:
    toc: true
    toc-location: left
    theme: sandstone
---

# 0. Setting up

```{r libraries-and-data}
library(tidyverse) # general use
library(plotly) # JS plots!
library(DT) # JS tables!
library(leaflet) # JS maps!
library(leaflet.extras) # leaflet add-ons!

# reading in the RDS (saved data object)
lobs <- readRDS(file = here::here("data", "lobsters.rds"))
```

# 1. Summarizing the data

```{r creating-lobs-summary}
# creating new data frame
lobs_summary <- lobs %>% 
  
  # calculate total lobster counts by protection status, site, & year (each point will represent lobster counts at a single site for each year from 2012-2018) ----
  group_by(protection_status, site, year) %>% 
  count()
```

# 2. `plotly`

## a. create a static plot

```{r static-boxplot}
static <- lobs_summary %>% 
  
  # create boxplot of mpa vs non-mpa lobster counts ----
  ggplot(aes(x = protection_status, y = n)) +
  
  # geoms: a boxplot and points with jitter
  geom_boxplot(width = 0.5, outlier.shape = NA) +
  geom_point(aes(color = site, shape = site), size = 4, alpha = 0.8, 
             # turn the points into a jitter (with a little more control than geom_jitter)
             position = position_jitter(width = 0.25, height = 0, seed = 1)) +
  
  # update colors ----
  scale_color_manual(values = c("NAPL" = "#91B38A", 
                                "IVEE" = "#9565CC", 
                                "AQUE" = "#CCC065", 
                                "MOHK" = "#658ACC", 
                                "CARP" = "#CC6565")) +
  scale_shape_manual(values = c(15, 25, 17, 18, 19)) +
  
  # update labels ----
  labs(x = "Protection Status",
       y = "Lobster Counts",
       color = "Site", 
       shape = "Site") + 
  
  # theme ----
  theme_linedraw() +
  theme(axis.text = element_text(size = 10),
        axis.title = element_text(size = 13),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 11))

# print plot ----
static
```

## b. create an interactive plot

```{r basic-interactive-plot}
ggplotly(static)
```

## c. create a better interactive plot

### i. create a marker

```{r summary-marker-df}
# adding a column to lobs_summary
lobs_summary_marker <- lobs_summary %>% 
  # creating a new column called "marker
  mutate(marker = paste0(
    "<br>", "Site: ", site, "<br>",
    "Year: ", year, "<br>",
    "Status: ", protection_status, "<br>",
    "Lobster count: ", n
  ))
```

### ii. make a new static plot with `text = marker` aesthetic argument

```{r new-static-plot, warning = TRUE}
# creating a new static plot
static_with_marker <- lobs_summary_marker %>% 
  
  # create boxplot of mpa vs non-mpa lobster counts ----
  ggplot(aes(x = protection_status, y = n, text = marker, group = protection_status)) +
  
  # geoms: boxplot and jitter
  geom_boxplot(width = 0.5, outlier.shape = NA) +
  geom_point(aes(color = site, shape = site), size = 4, alpha = 0.8, 
             position = position_jitter(width = 0.25, height = 0, seed = 1)) +
  
  # update colors ----
  scale_color_manual(values = c("#91B38A", "#9565CC", "#CCC065", "#658ACC", "#CC6565")) +
  scale_shape_manual(values = c(15, 25, 17, 18, 19)) +
  
  # update labels ----
  labs(x = "Protection Status",
       y = "Lobster Counts",
       color = "Site", 
       shape = "Site") + 
  
  # theme ----
  theme_linedraw() +
  theme(axis.text = element_text(size = 10),
        axis.title = element_text(size = 13),
        legend.text = element_text(size = 10),
        legend.title = element_text(size = 11))

# running the ggplot object will give you a scary warning - that's ok!
static_with_marker
```

### iii. create plot with markers

```{r better-interactive-plot}
lobs_interactive <- ggplotly(static_with_marker, tooltip = "text") %>% 
  # layout: most formatting goes here!
  layout(
    # adjusting the font
    font = list(family = "Times"),
    
    # adjust the hover label
    hoverlabel = list(
      font = list(
        family = "Times",
        size = 13,
        color = "white",
        align = "left"
      )
    )
  )

lobs_interactive
```

### iv. doing things in `plot_ly`

```{r doing-in-plotly}
plot_ly(
  # call the data
  lobs_summary_marker,
  
  # axes
  x = ~ protection_status,
  y = ~ n,
  
  # specifying type
  type = "box",
  
  # show underlying data
  boxpoints = "all",
  
  # center points on boxplot
  pointpos = 0,
  
  # control width of jitter
  jitter = 0.25,
  
  # tooltip/hover tip
  # hoverinfo comes from the text argument
  hoverinfo = "text",
  # text comes from the marker column in the df
  text = ~ marker
)
```

# 3. `DT`

## a. create a basic interactive table

```{r basic-DT}
datatable(data = lobs)
```

## b. customizing your DT

```{r advanced-DT}
lobs_dt <- datatable(data = lobs,
                     
                     # make the column names nice
                     colnames = c("Year", "Date", "Site", "Protection status", "Transect", "Replicate", "Size (mm)", "Count", "Latitude", "Longitude"), 
                     
                     extensions = c("Buttons", "ColReorder"),
                     filter = "top",
                     
                     # adjust any formatting options, extensions, etc.
                     options = list(
                       # highlight search terms
                       searchHighlight = TRUE,
                       # automatically resize columns
                       autoWidth = TRUE,
                       buttons = c("copy", "csv", "excel", "pdf", "print", "colvis"),
                       dom = "Bfrtip",
                       
                       # links to extension call
                       colReorder = TRUE
                       
                       
                     )
                     )

lobs_dt
```

# 4. `leaflet`

## a. some cleaning and filtering

```{r unique-sites}
# create df of unique sites ----
sites <- lobs %>% 
  select(site, protection_status, lat, lon) %>% 
  distinct()

# just mpa sites ----
mpa <- sites %>% 
  filter(protection_status == "MPA")

# just non-mpa sites ----
non_mpa <- sites %>% 
  filter(protection_status == "non-MPA")
```

## b. create a custom icon

```{r lobster-icon}
lobster_icon <- makeIcon(
  iconUrl = here::here("media", "lobster.png"),
  iconWidth = 30, iconHeight = 30
)
```

## c. create a map!

```{r leaflet-map}
site_map <- leaflet() %>% 
  
  # base map tile layer ----
  addProviderTiles(providers$Esri.WorldImagery, group = "ESRI World Imagery") %>% 
  addProviderTiles(providers$Esri.OceanBasemap, group = "ESRI Oceans") %>% 
  
  # add mini map ----
  addMiniMap(toggleDisplay = TRUE, minimized = TRUE) %>% 
  
  # set view over SB channel ----
  setView(lng = -119.83, lat = 34.44, zoom = 9) %>% 
  
  # add MPA markers ----
  addMarkers(data = mpa, group = "MPA Sites",
             icon = lobster_icon,
             lng = ~lon, lat = ~lat,
             popup = paste("Site Name:", mpa$site, "<br>",
                           "Coordinates (lat/lon):", mpa$lat, "/", mpa$lon)) %>% 
  
  # add non-MPA markers ----
  addMarkers(data = non_mpa, group = "Non-MPA Sites",
             icon = lobster_icon,
             lng = ~lon, lat = ~lat,
             popup = paste("Site Name:", non_mpa$site, "<br>",
                           "Coordinates (lat/lon):", non_mpa$lat, "/", non_mpa$lon)) %>% 
  
  # add layers control ----
  addLayersControl(
    baseGroups = c("ESRI World Imagery", "ESRI Oceans"),
    overlayGroups = c("MPA Sites", "Non-MPA Sites")
  ) %>% 
  
  # add reset map button ----
  leaflet.extras::addResetMapButton()


site_map
```

# 4. saving the html objects

```{r saving-map, eval = FALSE}
htmltools::save_html(lobs_interactive, here::here("outputs", "plotly.html"))
htmltools::save_html(lobs_dt, here::here("outputs", "dt.html"))
htmltools::save_html(site_map, here::here("outputs", "leaflet.html"))
```
